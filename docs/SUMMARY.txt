================================================================================
                    TEMPS-ROCKS CODEBASE ANALYSIS SUMMARY
================================================================================

PROJECT: temps.rocks - Chat-first climbing conditions web app
STATUS: Early stage (UI complete, core logic ~15% implemented)
TECH STACK: Next.js 15 + React 18 + TypeScript + Tailwind CSS + Supabase

================================================================================
1. DIRECTORY STRUCTURE
================================================================================

src/
  app/
    api/
      chat/route.ts             -> POST endpoint (MOCK - needs Gemini integration)
      sync/[key]/route.ts       -> GET/POST sync endpoints (STUB)
    layout.tsx                  -> Root layout
    page.tsx                    -> Homepage
  components/
    ChatInterface.tsx           -> Main chat UI (mock responses)
    Features.tsx               -> 6-feature showcase
    Footer.tsx                 -> Footer section
    ThemeProvider.tsx          -> Dark mode provider
    ThemeToggle.tsx            -> Theme toggle button
    ui/                        -> 50+ shadcn/ui components
  integrations/
    supabase/
      client.ts                -> Supabase client (initialized, not used)
      types.ts                 -> Auto-generated DB types
  hooks/
    use-toast.ts               -> Toast notifications hook
    use-mobile.tsx             -> Mobile detection hook
  lib/
    utils.ts                   -> Classname utilities
  index.css                    -> Design system & Tailwind
  App.tsx, main.tsx           -> React app roots

docs/
  PRD.md                       -> Complete product requirements document

Config files:
  next.config.ts              -> Next.js config (basic setup)
  tsconfig.json               -> TypeScript config (strict mode)
  tailwind.config.ts          -> Tailwind with custom theme
  postcss.config.js           -> PostCSS processing
  package.json                -> 40+ dependencies
  components.json             -> shadcn/ui config
  .env                        -> Supabase keys (DO NOT COMMIT)
  .env.example                -> Template for env vars

================================================================================
2. IMPLEMENTATION STATUS
================================================================================

COMPLETE (✓)
  - UI Framework: Next.js 15 + React 18
  - Styling: Tailwind CSS + dark mode
  - Component library: 50+ shadcn/ui components
  - Design system: Earthy color palette (terracotta, sage, sky blue)
  - Chat UI: Message display, input form, example queries
  - Features section: 6 feature cards with icons
  - Footer: Branding and links
  - Database schema: 6 tables defined in Supabase (crags, sectors, routes, reports, confirmations, user_profiles)

PARTIAL (⚠️)
  - Chat API: Accepts POST, returns mock responses
  - Sync API: Route defined, no database operations
  - Supabase client: Configured but not integrated

NOT IMPLEMENTED (❌)
  - Gemini 2.5 Flash LLM integration
  - Real API calls: OpenBeta (crags), Open-Meteo (weather), suncalc (sun)
  - Message handling & intent classification
  - Condition calculation logic
  - Community reports CRUD
  - Report confirmations
  - Local storage / IndexedDB
  - Sync key generation & multi-device sync
  - Shareable links
  - Settings UI

================================================================================
3. KEY API ENDPOINTS (DEFINED)
================================================================================

POST /api/chat                  -> Chat messages (MOCK, needs LLM)
  Input:  { message, lang?, location? }
  Output: { reply, chips[], state }
  Status: Line 38 of ChatInterface.tsx marked TODO

GET /api/sync/:key             -> Retrieve user data (STUB)
  Output: { profile, crags, reports, confirmations }
  Status: Line 12 of sync/route.ts marked TODO

POST /api/sync/:key            -> Push user data (STUB)
  Output: { success, syncedAt }
  Status: Line 41-42 marked TODO

MISSING ENDPOINTS:
  - GET /api/conditions              -> Get crag conditions
  - POST /api/reports                -> Create report
  - GET /api/reports/:cragId         -> Get reports for crag
  - POST /api/reports/:id/confirm    -> Confirm a report

================================================================================
4. DATA MODELS (Supabase Schema)
================================================================================

user_profiles
  - id (PK)
  - display_name (optional)
  - sync_key_hash (unique)
  - created_at, updated_at

crags
  - id (PK), name, lat, lon, country
  - rock_type, aspects (array)
  - created_at, updated_at

sectors
  - id (PK), crag_id (FK), name
  - lat, lon, aspect (degrees)
  - created_at, updated_at

routes
  - id (PK), sector_id (FK), name, grade
  - created_at, updated_at

reports
  - id (PK), author_id (FK), crag_id (FK)
  - sector_id (FK), route_id (FK)
  - text, rating_dry (1-5), rating_wind (1-5)
  - rating_crowds (1-5), photo_url
  - created_at, updated_at

confirmations
  - id (PK), report_id (FK)
  - user_key_hash
  - created_at

================================================================================
5. LIBRARIES & DEPENDENCIES
================================================================================

Framework:          Next.js 15, React 18, TypeScript 5.8
UI/Styling:         Tailwind CSS, shadcn/ui, Radix UI (40+ components), Lucide icons
Database:           Supabase, @tanstack/react-query
AI/LLM:             Vercel AI SDK (ai@5.0.0) - NOT YET INTEGRATED
Forms:              react-hook-form, Zod
Utils:              date-fns, sonner (toasts), clsx, tailwind-merge
Advanced UI:        embla-carousel, react-day-picker, recharts, cmdk
Linting:            ESLint, TypeScript-ESLint

Total: 40+ npm dependencies, well-organized tech stack

================================================================================
6. DESIGN SYSTEM (src/index.css)
================================================================================

Light Mode:
  - Background:   Warm beige     (35° 20% 96%)
  - Foreground:   Dark brown     (20° 15% 15%)
  - Primary:      Terracotta    (15° 65% 55%)
  - Secondary:    Sage green    (140° 20% 60%)
  - Accent:       Sky blue      (200° 75% 55%)

Dark Mode:
  - Background:   Very dark     (20° 20% 10%)
  - Foreground:   Off-white     (35° 10% 95%)
  - Primary:      Light terra   (15° 70% 60%)
  - Secondary:    Light green   (140° 25% 45%)
  - Accent:       Light blue    (200° 70% 50%)

Custom Gradients: gradient-warm, gradient-earth, gradient-hero
Custom Shadows:   shadow-soft, shadow-medium, shadow-elevated
Custom Transitions: transition-smooth, transition-bounce

================================================================================
7. CRITICAL TODO ITEMS (MVP Blockers)
================================================================================

HIGH PRIORITY (Core functionality):
  1. Gemini 2.5 Flash Integration
     File: src/app/api/chat/route.ts (line 14, 27-29)
     - Use Vercel AI SDK to process chat messages
     - Classify user intent (get_conditions, add_report, etc.)
     - Route to appropriate external APIs

  2. OpenBeta API Integration
     - Fetch crags, sectors, routes data
     - Cache results in local storage

  3. Open-Meteo Weather Integration
     - Get hourly forecasts by lat/lon
     - Parse temperature, humidity, wind, rain

  4. Condition Calculation Logic
     - Implement rule-based scoring (Great/OK/Meh/Nope)
     - Factor in: rain, sun/wind exposure, rock type, aspect

  5. Community Reports CRUD
     - POST /api/reports endpoint
     - GET /api/reports/:cragId endpoint
     - Supabase INSERT/SELECT operations
     - Report form UI component

  6. Report Confirmations
     - POST /api/reports/:id/confirm endpoint
     - Prevent duplicate confirmations
     - Counter UI

MEDIUM PRIORITY (Sync & Offline):
  7. Sync Key Generation
     - Generate UUID for each user
     - Hash for secure storage
     - QR code display

  8. Local Storage / IndexedDB
     - Store crags, reports, confirmations locally
     - Sync with Supabase via POST /api/sync/:key

  9. Multi-Device Sync
     - Implement conflict resolution via updatedAt
     - Bidirectional sync
     - Merge algorithm

  10. Shareable Links
      - Dynamic routes: /[crag]/[sector]/[route]
      - Public conditions view
      - Report display

LOW PRIORITY (Polish):
  - Profanity filter
  - Rate limiting
  - Photo upload
  - Settings page
  - Search & nearby queries
  - Multi-language support
  - Embeddable widget

================================================================================
8. REACT COMPONENTS INVENTORY
================================================================================

Page Components:
  - src/app/page.tsx (homepage)
  - src/app/layout.tsx (root layout)

Feature Components:
  - ChatInterface.tsx (main chat - MOCK)
  - Features.tsx (6-feature grid)
  - Footer.tsx (footer section)
  - ThemeProvider.tsx (dark mode)
  - ThemeToggle.tsx (theme button)

UI Components (50+ from shadcn/ui):
  Layout: accordion, breadcrumb, card, carousel, drawer, sidebar, tabs
  Forms: checkbox, input, label, radio-group, select, switch, textarea, toggle
  Dialogs: alert-dialog, dialog, popover, tooltip, hover-card
  Data: table, pagination, progress, slider, scroll-area
  Navigation: command, context-menu, dropdown-menu, menubar, navigation-menu
  + 20+ more available

Hooks:
  - use-toast.ts (toast notifications)
  - use-mobile.tsx (mobile detection)

Utilities:
  - lib/utils.ts (cn - classname helper)

================================================================================
9. QUICK START / COMMANDS
================================================================================

npm install                    -> Install dependencies
npm run dev                    -> Start dev server (localhost:3000)
npm run build                  -> Production build
npm start                      -> Start production server
npm run lint                   -> Run ESLint
npm run type-check             -> TypeScript type checking
vercel                         -> Deploy to Vercel

================================================================================
10. ENVIRONMENT VARIABLES NEEDED
================================================================================

NEXT_PUBLIC_SUPABASE_URL           -> Supabase project URL
NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY -> Supabase anon key
GOOGLE_GENERATIVE_AI_API_KEY                     -> Gemini API key (for Vercel AI SDK)
AI_PROVIDER                        -> Set to "google" for Gemini

Current .env has Supabase configured, but Gemini key missing.

================================================================================
11. PROJECT METRICS
================================================================================

Codebase Size:
  - Src files: ~20 core files
  - Total lines of code: ~2000 (excluding node_modules)
  - Components: 55+ (50+ shadcn/ui + 5 custom)

Implementation:
  - UI/Styling: 100% complete
  - API stubs: 40% complete (structure only)
  - Backend logic: 5% complete
  - Database integration: 0% (schema defined, no queries)

Estimated effort:
  - Current: 1-2 weeks of scaffolding/scaffolding
  - Remaining MVP: 3-4 weeks of feature implementation

File Size:
  - package.json: 80 dependencies total
  - node_modules: ~500MB
  - Source code: ~50MB

================================================================================
12. KEY FILES TO REVIEW FIRST
================================================================================

For Understanding Flow:
  1. /src/app/page.tsx              -> Entry point
  2. /src/components/ChatInterface.tsx -> Main UI component
  3. /src/app/api/chat/route.ts     -> Chat endpoint (needs work)
  4. /src/app/api/sync/[key]/route.ts -> Sync endpoints
  5. /src/index.css                 -> Design system

For Configuration:
  6. next.config.ts
  7. tsconfig.json
  8. tailwind.config.ts
  9. package.json

For Requirements:
  10. docs/PRD.md                   -> Complete feature spec

================================================================================
CONCLUSION
================================================================================

The project has a solid foundation:
  - Modern tech stack (Next.js 15, TypeScript, Tailwind)
  - Professional UI framework (shadcn/ui)
  - Well-designed database schema
  - Beautiful design system with dark mode support
  - Comprehensive PRD with clear requirements

Main work ahead:
  - LLM integration (Gemini)
  - External API connections (OpenBeta, Open-Meteo)
  - Business logic implementation
  - Database CRUD operations
  - Offline/sync features

The 50+ UI components are ready to use, so feature building can start
immediately once APIs are set up.

Estimated time to MVP: 3-4 weeks of focused development.

================================================================================
Generated: 2025-10-18
Analysis File: /Users/rbatsenko/Desktop/Projects/temps-rocks/CODEBASE_ANALYSIS.md
================================================================================
